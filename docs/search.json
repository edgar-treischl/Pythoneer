[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pythoneer",
    "section": "",
    "text": "Preface\nWelcome to the Pythoneer website. The Pythoneer project aims to support the transition of R user into the Python world. The project is work in progress and at a very early stage.\n\n#Print with Python\nprint(\"Hello world\")\n\nHello world"
  },
  {
    "objectID": "intro.html#how-not-to-calculate-basic-statistics",
    "href": "intro.html#how-not-to-calculate-basic-statistics",
    "title": "1  Introduction",
    "section": "How (not) to calculate basic statistics",
    "text": "How (not) to calculate basic statistics\nThe last Python book I read, introduced probably over a hundred pages about the different data structure, and of course, we need to know that to handle Python. I certainly don’t argue about this point, but instead of providing me meaningful examples to illustrate this point, I am reading about about artificial examples that not even work when I copied the code and run it in my own console. Well, shit happens, don’t you think? I really started to get the creep as I reached a statistics section. Let’s see what I learned from this chapter.\nIn Python, you have to import the according libraries and install first, in case you work with a library the very first time. We will cover these points later, for the moment it is enough to look at the Python code and output. So, I import the seaborn package in order to have some data at hand. The seaborn.get_dataset_names() function returns all available data sets.\n\n#import seaborn to get some data\nimport seaborn as sns\nsns.get_dataset_names()\n\n#> ['anagrams', 'anscombe', 'attention', 'brain_networks', 'car_crashes', 'diamonds', 'dots', 'dowjones', 'exercise', 'flights', 'fmri', 'geyser', 'glue', 'healthexp', 'iris', 'mpg', 'penguins', 'planets', 'seaice', 'taxis', 'tips', 'titanic']\n\n\nWe can save the mpg data under the name cars and use the print function to examine the data.\n\n#use the mpg data set as cars\ncars = sns.load_dataset(\"mpg\") \nprint(cars)\n\n#>       mpg  cylinders  ...  origin                       name\n#> 0    18.0          8  ...     usa  chevrolet chevelle malibu\n#> 1    15.0          8  ...     usa          buick skylark 320\n#> 2    18.0          8  ...     usa         plymouth satellite\n#> 3    16.0          8  ...     usa              amc rebel sst\n#> 4    17.0          8  ...     usa                ford torino\n#> ..    ...        ...  ...     ...                        ...\n#> 393  27.0          4  ...     usa            ford mustang gl\n#> 394  44.0          4  ...  europe                  vw pickup\n#> 395  32.0          4  ...     usa              dodge rampage\n#> 396  28.0          4  ...     usa                ford ranger\n#> 397  31.0          4  ...     usa                 chevy s-10\n#> \n#> [398 rows x 9 columns]\n\n\nSo, what did I learn in the chapter? Well, how can we calculate an mean with Python? Shouldn’t be that though. I know how to calculate a mean by hand since my early days of school and how it is done in a statistic software. The authors offered me the following solution:\n\ndef mean (array): \n    n = len(array)\n    return sum(array) / n\n\nmean(cars.mpg)\n\n#> 23.514572864321615\n\n\nIn the code snippet we define the function mean to create a mean, within this function we define n as the length(len) of the array and the functions returns a value, which divides the sum of the array by the length n. Fine. That’s exactly a cool way to show us how a functions works. We have to provide a name of a function, tell Python what the function should do, in this case with an array of numbers.\nIn my experience, I always learned how functions and other concepts work in much more artificial way. Look how I learned how a function works in Python:\n\n#Create your own function\ndef hello(name):\n    return (f\"Hallo, {name}! How are you?\")\n\n# Call the function and give value for the input name\nhello(\"Edgar\")\n\n#> 'Hallo, Edgar! How are you?'\n\n\nThus, we create the hello function that returns a sentence and inserts the name of the input value. Nothing wrong about that, even though calculating a mean seems a little bit more realistic to illustrate why we need such a function.\nAnyway, in the next steps the author gives us a function for the mean, a function for the median, a function for the modus, a function to calculate the variance and, I am dead serious, other functions for others measure of central tendency. Come on, this guy can’t be serious, we should learn how this works in practice. Use NumPy to get the scientific toolkit and pandas for tabular processing and the presentation of data. The latter comes with a lot of functions we can use them in order to calculate basic statistics and more advanced stuff. Use the describe function to get an overview about the data. Let’s see how it works.\n\nimport numpy as np\nimport pandas as pd\n\ncars.describe()\n\n#>               mpg   cylinders  ...  acceleration  model_year\n#> count  398.000000  398.000000  ...    398.000000  398.000000\n#> mean    23.514573    5.454774  ...     15.568090   76.010050\n#> std      7.815984    1.701004  ...      2.757689    3.697627\n#> min      9.000000    3.000000  ...      8.000000   70.000000\n#> 25%     17.500000    4.000000  ...     13.825000   73.000000\n#> 50%     23.000000    4.000000  ...     15.500000   76.000000\n#> 75%     29.000000    8.000000  ...     17.175000   79.000000\n#> max     46.600000    8.000000  ...     24.800000   82.000000\n#> \n#> [8 rows x 7 columns]\n\n\nSo, we have to append the describe() function to the saved cars data in order to get an overview of the central tendency measures. You can do the same with all other functions that calculate other measures, such as the mean or standard deviance:\n\ncars.mean()\n\n#> mpg               23.514573\n#> cylinders          5.454774\n#> displacement     193.425879\n#> horsepower       104.469388\n#> weight          2970.424623\n#> acceleration      15.568090\n#> model_year        76.010050\n#> dtype: float64\n#> \n#> <string>:1: FutureWarning: The default value of numeric_only in DataFrame.mean is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n\ncars.std()\n\n#> mpg               7.815984\n#> cylinders         1.701004\n#> displacement    104.269838\n#> horsepower       38.491160\n#> weight          846.841774\n#> acceleration      2.757689\n#> model_year        3.697627\n#> dtype: float64\n#> \n#> <string>:1: FutureWarning: The default value of numeric_only in DataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n\n\nSo, what you do think? Shall we learn how to define our own function to calculate the mean or choose the easy way and let a package calculate the “hard” stuff for us. I would say both. We learned on this entry how to write an own function by solving a real-world problem. In case we didn’t know how to calculate a mean in Python we could use a function and I provided you on purpose with a second example to show you how many others explain a function. However, after learning what a function is, we need to know how we could work and spent our time more efficiently.\nThis point becomes bothersome if we spent too much of our time with things that have a simple solution. For instance, guess what the next code does. And I guess you will skip the code after line 2, well that’s at least what recommend if you know what a correlation is.\n\nimport math\ndef correlation(x, y):\n    n = len(x) \n    \n    # Means\n    x_mn = sum(x) / n \n    y_mn = sum(y) / n\n    \n    # Variance\n    var_x = (1 / (n-1)) * sum(map(lambda xi: (xi - x_mn) ** 2 , x)) \n    var_y = (1 / (n-1)) * sum(map(lambda yi: (yi - y_mn) ** 2 , y))\n    \n    # Std\n    std_x, std_y = math.sqrt(var_x), math.sqrt(var_y)\n    \n    # Covariance\n    xy_var = map(lambda xi, yi: (xi - x_mn) * (yi - y_mn), x, y) \n    cov = (1 / (n-1)) * sum(xy_var)\n    \n    # Pearson's R\n    r = cov / (std_x * std_y) \n    return float(f\"{r:.3f}\")\n\n# Some data\nsize = [20, 15, 40, 25, 35]\ncost = [300, 400, 600, 700, 666]\n\nprint(correlation(size, cost))\n\n#> 0.666\n\n\nIt’s the “devil’s code”! Of course, I am just kidding, but please don’t get me wrong. I think it is very useful to see how a correlation coefficients is calculated. You should do it at least once per hand if you learn the concept for the first time. But in my case I don’t have to learn what a correlation is. Let’s learn how Python works, but in an efficient way:\n\nnp.corrcoef(size, cost)\n\n#> array([[1.        , 0.66645893],\n#>        [0.66645893, 1.        ]])\n\n\nAnd we should at least look at the scatter plot in case we talk about correlations. The matplotlib provides a lot of different graphs for us.\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nmatplotlib.style.use('ggplot')\n\nplt.scatter(cars.mpg, cars.horsepower)\n\n\n\n\nAnd in case you are an R user, you can even use the ggplot2 style, just to let you show some possibilities. But of course, we have to think more systematically how we can reach our goal in the next chapter."
  },
  {
    "objectID": "firststeps.html",
    "href": "firststeps.html",
    "title": "2  First steps",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n\n#List all conda installations\nlibrary(reticulate)\nconda_list()\n\n          name\n1         base\n2 r-reticulate\n                                                               python\n1                   /Users/edgar/Library/r-miniconda-arm64/bin/python\n2 /Users/edgar/Library/r-miniconda-arm64/envs/r-reticulate/bin/python\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n\nuse_python(\"/Users/edgar/Library/r-miniconda-arm64/envs/r-reticulate/bin/python\")\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n\n#install packages\nconda_install(\"r-reticulate\", \"pandas\")\npandas <- import(\"pandas\")\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n\n#import numpy as np\n#import pandas as pd\nimport seaborn as sns\nimport scipy.stats\n\ncars = sns.load_dataset(\"mpg\")\n#print(cars)\ncars.head()\n\n    mpg  cylinders  displacement  ...  model_year  origin                       name\n0  18.0          8         307.0  ...          70     usa  chevrolet chevelle malibu\n1  15.0          8         350.0  ...          70     usa          buick skylark 320\n2  18.0          8         318.0  ...          70     usa         plymouth satellite\n3  16.0          8         304.0  ...          70     usa              amc rebel sst\n4  17.0          8         302.0  ...          70     usa                ford torino\n\n[5 rows x 9 columns]\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n\ncars.describe()\n\n              mpg   cylinders  ...  acceleration  model_year\ncount  398.000000  398.000000  ...    398.000000  398.000000\nmean    23.514573    5.454774  ...     15.568090   76.010050\nstd      7.815984    1.701004  ...      2.757689    3.697627\nmin      9.000000    3.000000  ...      8.000000   70.000000\n25%     17.500000    4.000000  ...     13.825000   73.000000\n50%     23.000000    4.000000  ...     15.500000   76.000000\n75%     29.000000    8.000000  ...     17.175000   79.000000\nmax     46.600000    8.000000  ...     24.800000   82.000000\n\n[8 rows x 7 columns]\n\ncars.mean()\n\nmpg               23.514573\ncylinders          5.454774\ndisplacement     193.425879\nhorsepower       104.469388\nweight          2970.424623\nacceleration      15.568090\nmodel_year        76.010050\ndtype: float64\n\n<string>:1: FutureWarning: The default value of numeric_only in DataFrame.mean is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n\ncars = cars.dropna()\nmpg = cars[\"mpg\"]\nhorsepower = cars[\"horsepower\"]\n\n\nscipy.stats.pearsonr(mpg, horsepower)\n\nPearsonRResult(statistic=-0.7784267838977761, pvalue=7.031989029403436e-81)\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\n\nresults = smf.ols('mpg ~ horsepower', data=cars).fit()\nprint(results.summary())\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                    mpg   R-squared:                       0.606\nModel:                            OLS   Adj. R-squared:                  0.605\nMethod:                 Least Squares   F-statistic:                     599.7\nDate:                Fri, 24 Mar 2023   Prob (F-statistic):           7.03e-81\nTime:                        12:11:24   Log-Likelihood:                -1178.7\nNo. Observations:                 392   AIC:                             2361.\nDf Residuals:                     390   BIC:                             2369.\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     39.9359      0.717     55.660      0.000      38.525      41.347\nhorsepower    -0.1578      0.006    -24.489      0.000      -0.171      -0.145\n==============================================================================\nOmnibus:                       16.432   Durbin-Watson:                   0.920\nProb(Omnibus):                  0.000   Jarque-Bera (JB):               17.305\nSkew:                           0.492   Prob(JB):                     0.000175\nKurtosis:                       3.299   Cond. No.                         322.\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n\nimport seaborn as sns\nsns.set_theme(style=\"ticks\")\n\n# Load the example dataset for Anscombe's quartet\ndf = sns.load_dataset(\"anscombe\")\n\n# Show the results of a linear regression within each dataset\nsns.lmplot(\n    data=df, x=\"x\", y=\"y\", col=\"dataset\", hue=\"dataset\",\n    col_wrap=2, palette=\"muted\", ci=None,\n    height=4, scatter_kws={\"s\": 50, \"alpha\": 1}\n)"
  },
  {
    "objectID": "manipulation.html#filter",
    "href": "manipulation.html#filter",
    "title": "3  Data manipulation",
    "section": "3.1 Filter",
    "text": "3.1 Filter\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\n#Filter data\npenguins.query('species == \"Adelie\"').head()\n\n  species     island  bill_length_mm  ...  flipper_length_mm  body_mass_g     sex\n0  Adelie  Torgersen            39.1  ...              181.0       3750.0    Male\n1  Adelie  Torgersen            39.5  ...              186.0       3800.0  Female\n2  Adelie  Torgersen            40.3  ...              195.0       3250.0  Female\n4  Adelie  Torgersen            36.7  ...              193.0       3450.0  Female\n5  Adelie  Torgersen            39.3  ...              190.0       3650.0    Male\n\n[5 rows x 7 columns]\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\n#Filter data\npenguins.query('species == \"Adelie\" & sex == \"Male\" ').head()\n\n   species     island  bill_length_mm  ...  flipper_length_mm  body_mass_g   sex\n0   Adelie  Torgersen            39.1  ...              181.0       3750.0  Male\n5   Adelie  Torgersen            39.3  ...              190.0       3650.0  Male\n7   Adelie  Torgersen            39.2  ...              195.0       4675.0  Male\n13  Adelie  Torgersen            38.6  ...              191.0       3800.0  Male\n14  Adelie  Torgersen            34.6  ...              198.0       4400.0  Male\n\n[5 rows x 7 columns]\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum."
  },
  {
    "objectID": "manipulation.html#arrange",
    "href": "manipulation.html#arrange",
    "title": "3  Data manipulation",
    "section": "3.2 Arrange",
    "text": "3.2 Arrange\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\n#Sort variables\npenguins.sort_values(by=\"body_mass_g\").head()\n\n       species     island  ...  body_mass_g     sex\n190  Chinstrap      Dream  ...       2700.0  Female\n64      Adelie     Biscoe  ...       2850.0  Female\n58      Adelie     Biscoe  ...       2850.0  Female\n116     Adelie  Torgersen  ...       2900.0  Female\n98      Adelie      Dream  ...       2900.0  Female\n\n[5 rows x 7 columns]\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\n#Sort variables descendingly\npenguins.sort_values(by=\"body_mass_g\", ascending=False).head()\n\n    species  island  bill_length_mm  ...  flipper_length_mm  body_mass_g   sex\n237  Gentoo  Biscoe            49.2  ...              221.0       6300.0  Male\n253  Gentoo  Biscoe            59.6  ...              230.0       6050.0  Male\n297  Gentoo  Biscoe            51.1  ...              220.0       6000.0  Male\n337  Gentoo  Biscoe            48.8  ...              222.0       6000.0  Male\n299  Gentoo  Biscoe            45.2  ...              223.0       5950.0  Male\n\n[5 rows x 7 columns]"
  },
  {
    "objectID": "manipulation.html#select",
    "href": "manipulation.html#select",
    "title": "3  Data manipulation",
    "section": "3.3 Select",
    "text": "3.3 Select\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\n#Select via []\npenguins[['species', 'island']].head()\n\n  species     island\n0  Adelie  Torgersen\n1  Adelie  Torgersen\n2  Adelie  Torgersen\n4  Adelie  Torgersen\n5  Adelie  Torgersen\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\npenguins.loc[:, 'island':'bill_depth_mm'].head()\n\n      island  bill_length_mm  bill_depth_mm\n0  Torgersen            39.1           18.7\n1  Torgersen            39.5           17.4\n2  Torgersen            40.3           18.0\n4  Torgersen            36.7           19.3\n5  Torgersen            39.3           20.6\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\nadelie = penguins[penguins[\"species\"].isin([\"Adelie\"])]\nadelie.head()\n\n  species     island  bill_length_mm  ...  flipper_length_mm  body_mass_g     sex\n0  Adelie  Torgersen            39.1  ...              181.0       3750.0    Male\n1  Adelie  Torgersen            39.5  ...              186.0       3800.0  Female\n2  Adelie  Torgersen            40.3  ...              195.0       3250.0  Female\n4  Adelie  Torgersen            36.7  ...              193.0       3450.0  Female\n5  Adelie  Torgersen            39.3  ...              190.0       3650.0    Male\n\n[5 rows x 7 columns]"
  },
  {
    "objectID": "manipulation.html#mutate",
    "href": "manipulation.html#mutate",
    "title": "3  Data manipulation",
    "section": "3.4 Mutate",
    "text": "3.4 Mutate\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\nweight = penguins[['body_mass_g']]\nweight = weight.assign(body_mass_kilo = weight['body_mass_g'] /1000)\nweight.head()\n\n   body_mass_g  body_mass_kilo\n0       3750.0            3.75\n1       3800.0            3.80\n2       3250.0            3.25\n4       3450.0            3.45\n5       3650.0            3.65"
  },
  {
    "objectID": "manipulation.html#summarize",
    "href": "manipulation.html#summarize",
    "title": "3  Data manipulation",
    "section": "3.5 Summarize",
    "text": "3.5 Summarize\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\npenguins.describe()\n\n       bill_length_mm  bill_depth_mm  flipper_length_mm  body_mass_g\ncount      333.000000     333.000000         333.000000   333.000000\nmean        43.992793      17.164865         200.966967  4207.057057\nstd          5.468668       1.969235          14.015765   805.215802\nmin         32.100000      13.100000         172.000000  2700.000000\n25%         39.500000      15.600000         190.000000  3550.000000\n50%         44.500000      17.300000         197.000000  4050.000000\n75%         48.600000      18.700000         213.000000  4775.000000\nmax         59.600000      21.500000         231.000000  6300.000000\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\npenguins[[\"sex\", \"body_mass_g\"]].groupby(\"sex\").mean()\n\n        body_mass_g\nsex                \nFemale  3862.272727\nMale    4545.684524\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\npenguins.groupby([\"sex\", \"species\"])[\"body_mass_g\"].mean()\n\nsex     species  \nFemale  Adelie       3368.835616\n        Chinstrap    3527.205882\n        Gentoo       4679.741379\nMale    Adelie       4043.493151\n        Chinstrap    3938.970588\n        Gentoo       5484.836066\nName: body_mass_g, dtype: float64\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\n#shortr penguins[\"species\"].value_counts()\npenguins.groupby(\"species\")[\"species\"].count()\n\nspecies\nAdelie       146\nChinstrap     68\nGentoo       119\nName: species, dtype: int64\n\n\n\nREMEMBER\n\nAggregation statistics can be calculated on entire columns or rows.\ngroupby provides the power of the split-apply-combine pattern.\nvalue_counts is a convenient shortcut to count the number of entries in each category of a variable.\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\npenguins.loc[penguins['species'] == \"Adelie\", 'Adelie'] = 'True' \npenguins.loc[penguins['species'] != \"Adelie\", 'Adelie'] = 'False' \npenguins[['species', 'Adelie']].head()\n\n  species Adelie\n0  Adelie   True\n1  Adelie   True\n2  Adelie   True\n4  Adelie   True\n5  Adelie   True\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\npenguins['check_length'] = penguins['bill_length_mm'].apply(lambda x: 'True' if x <= 40 else 'False')\npenguins[['bill_length_mm', 'check_length']].head()\n\n   bill_length_mm check_length\n0            39.1         True\n1            39.5         True\n2            40.3        False\n4            36.7         True\n5            39.3         True"
  },
  {
    "objectID": "visualization.html#categorical-data",
    "href": "visualization.html#categorical-data",
    "title": "4  Visualization",
    "section": "4.1 Categorical data",
    "text": "4.1 Categorical data\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\n#Bar graph\nsns.barplot(data=penguins, x=\"species\", y=\"bill_length_mm\")\n\n\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\n#Beeswarm\nsns.catplot(data=penguins, kind=\"swarm\", x=\"sex\", y=\"bill_length_mm\", hue=\"species\")"
  },
  {
    "objectID": "visualization.html#relationsships",
    "href": "visualization.html#relationsships",
    "title": "4  Visualization",
    "section": "4.2 Relationsships",
    "text": "4.2 Relationsships\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nmatplotlib.style.use('ggplot')\n\nplt.scatter(penguins.body_mass_g, penguins.bill_length_mm)\n\n\n\n\nStet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n\n#Scatterplot\nfrom plotnine import *\n\n(ggplot(penguins, aes('body_mass_g', 'bill_length_mm'))\n + geom_point()\n + stat_smooth(method='lm')\n + facet_wrap('~species'))\n\n\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n\n#Histogram\n(ggplot(penguins, aes(x='body_mass_g'))\n    + geom_histogram()\n    )\n\n<ggplot: (316930073)>\n\n/Users/edgar/Library/r-miniconda-arm64/envs/r-reticulate/lib/python3.8/site-packages/plotnine/stats/stat_bin.py:95: PlotnineWarning: 'stat_bin()' using 'bins = 11'. Pick better value with 'binwidth'.\n\n\n\n\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n\n# geom_boxplot\n(ggplot(penguins)\n  + geom_boxplot(aes(x='factor(species)', y='body_mass_g'))\n)\n\n<ggplot: (320703389)>"
  }
]